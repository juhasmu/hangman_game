{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\hangman\\\\src\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport ShowDrawing from \"./ShowDrawing\";\nimport ShowWord from \"./ShowWord\";\nimport { useState } from 'react';\nimport Keyboard from \"./Keyboard\";\nimport GameOver from \"./GameOver\";\nimport ShowGuessedChars from \"./ShowGuessedChars\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = _ref => {\n  _s();\n\n  let {\n    toGuessChars\n  } = _ref;\n  let [count, setCount] = useState(0);\n  let [guessedChars, setGuessedChars] = useState([]);\n\n  if (count < 1) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ShowWord, {\n        toGuessChars: toGuessChars,\n        guessedChars: guessedChars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n        guessedChars: guessedChars,\n        setGuessedChars: setGuessedChars,\n        setCount: setCount,\n        count: count,\n        toGuessC: toGuessChars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ShowGuessedChars, {\n        guessedChars: guessedChars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  } else if (count > 10) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ShowDrawing, {\n        drawingIndex: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ShowDrawing, {\n        drawingIndex: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ShowWord, {\n        toGuessChars: toGuessChars,\n        guessedChars: guessedChars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n        guessedChars: guessedChars,\n        setGuessedChars: setGuessedChars,\n        setCount: setCount,\n        count: count,\n        toGuessC: toGuessChars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ShowGuessedChars, {\n        guessedChars: guessedChars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(Main, \"zQXp4n80s2n/kH3hwg4frCfbl5M=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/js/hangman/src/Main.js"],"names":["ShowDrawing","ShowWord","useState","Keyboard","GameOver","ShowGuessedChars","Main","toGuessChars","count","setCount","guessedChars","setGuessedChars"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;;AAEA,MAAMC,IAAI,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAACC,IAAAA;AAAD,GAAmB;AAE7B,MAAI,CAACC,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,CAAD,CAA/B;AACA,MAAI,CAACQ,YAAD,EAAcC,eAAd,IAA+BT,QAAQ,CAAC,EAAD,CAA3C;;AACA,MAAGM,KAAK,GAAC,CAAT,EAAW;AACP,wBACI;AAAA,8BACI,QAAC,QAAD;AAAU,QAAA,YAAY,EAAED,YAAxB;AAAsC,QAAA,YAAY,EAAEG;AAApD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,YAAY,EAAEA,YAAxB;AAAsC,QAAA,eAAe,EAAEC,eAAvD;AAAwE,QAAA,QAAQ,EAAEF,QAAlF;AAA4F,QAAA,KAAK,EAAED,KAAnG;AAA0G,QAAA,QAAQ,EAAED;AAApH;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,gBAAD;AAAkB,QAAA,YAAY,EAAEG;AAAhC;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,oBADJ;AAME,GAPN,MAQK,IAAGF,KAAK,GAAC,EAAT,EAAY;AACb,wBACI;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,YAAY,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAMH,GAPI,MAQD;AACJ,wBACI;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,YAAY,EAAEA;AAA3B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,YAAY,EAAED,YAAxB;AAAsC,QAAA,YAAY,EAAEG;AAApD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,QAAD;AAAU,QAAA,YAAY,EAAEA,YAAxB;AAAsC,QAAA,eAAe,EAAEC,eAAvD;AAAwE,QAAA,QAAQ,EAAEF,QAAlF;AAA4F,QAAA,KAAK,EAAED,KAAnG;AAA0G,QAAA,QAAQ,EAAED;AAApH;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,gBAAD;AAAkB,QAAA,YAAY,EAAEG;AAAhC;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA,oBADJ;AAOE;AACL,CA7BD;;GAAMJ,I;;KAAAA,I;AA+BN,eAAeA,IAAf","sourcesContent":["import ShowDrawing from \"./ShowDrawing\";\r\nimport ShowWord from \"./ShowWord\";\r\nimport { useState } from 'react'\r\nimport Keyboard from \"./Keyboard\";\r\nimport GameOver from \"./GameOver\";\r\nimport ShowGuessedChars from \"./ShowGuessedChars\";\r\n\r\nconst Main = ({toGuessChars}) => {\r\n    \r\n    let [count,setCount] = useState(0);\r\n    let [guessedChars,setGuessedChars]=useState([]);\r\n    if(count<1){\r\n        return (\r\n            <>\r\n                <ShowWord toGuessChars={toGuessChars} guessedChars={guessedChars}/>\r\n                <Keyboard guessedChars={guessedChars} setGuessedChars={setGuessedChars} setCount={setCount} count={count} toGuessC={toGuessChars}/>\r\n                <ShowGuessedChars guessedChars={guessedChars}/>  \r\n            </>\r\n        )}\r\n    else if(count>10){\r\n        return (\r\n            <>\r\n                <ShowDrawing drawingIndex={10}/>\r\n                <GameOver/> \r\n            </>\r\n        )\r\n    }\r\n    else{\r\n    return (\r\n        <>\r\n            <ShowDrawing drawingIndex={count}/>\r\n            <ShowWord toGuessChars={toGuessChars} guessedChars={guessedChars}/>\r\n            <Keyboard guessedChars={guessedChars} setGuessedChars={setGuessedChars} setCount={setCount} count={count} toGuessC={toGuessChars}/>  \r\n            <ShowGuessedChars guessedChars={guessedChars}/>\r\n        </>\r\n    )}\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}