{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\hangman\\\\src\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport ShowDrawing from \"./ShowDrawing\";\nimport ShowWord from \"./ShowWord\";\nimport { useState } from 'react';\nimport Keyboard from \"./Keyboard\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = _ref => {\n  _s();\n\n  let {\n    count,\n    setC\n  } = _ref;\n\n  function checkGuess(toGuessChars, guessedChars) {\n    for (let char of toGuessChars) {\n      if (char === guessedChars[guessedChars.length - 1]) return true;\n    }\n\n    return false;\n  }\n\n  function click() {\n    setC(count + 1);\n    console.log(count);\n  }\n\n  let toGuessChars = ['s', 'a', 'r', 'v', 'i', 'k', 'u', 'o', 'n', 'o'];\n  let [guessedChars, setGuessedChars] = useState([]);\n  let flag = true;\n  let temp = 0;\n  temp = count;\n  if (guessedChars.length - 1 > 0) flag = checkGuess(toGuessChars, guessedChars);\n\n  if (!flag) {\n    temp++;\n    click();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ShowDrawing, {\n      drawingIndex: temp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ShowWord, {\n      toGuessChars: toGuessChars,\n      guessedChars: guessedChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      guessedChars: guessedChars,\n      setGuessedChars: setGuessedChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      name: \"Nappi\",\n      class_Name: \"Nappi\",\n      onClick: click\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"I1hOqOr+dHIQz7jxkC/zG5Ed/D4=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/js/hangman/src/Main.js"],"names":["ShowDrawing","ShowWord","useState","Keyboard","Button","Main","count","setC","checkGuess","toGuessChars","guessedChars","char","length","click","console","log","setGuessedChars","flag","temp"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,MAAMC,IAAI,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAiB;;AAC3B,WAASC,UAAT,CAAoBC,YAApB,EAAiCC,YAAjC,EAA8C;AAC1C,SAAI,IAAIC,IAAR,IAAgBF,YAAhB,EAA6B;AACzB,UAAIE,IAAI,KAAKD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAoB,CAArB,CAAzB,EAAiD,OAAO,IAAP;AACpD;;AACD,WAAO,KAAP;AACH;;AACD,WAASC,KAAT,GAAgB;AACZN,IAAAA,IAAI,CAACD,KAAK,GAAC,CAAP,CAAJ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACH;;AACD,MAAIG,YAAY,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,CAAnB;AACA,MAAI,CAACC,YAAD,EAAcM,eAAd,IAA+Bd,QAAQ,CAAC,EAAD,CAA3C;AACA,MAAIe,IAAI,GAAG,IAAX;AACA,MAAIC,IAAI,GAAG,CAAX;AACAA,EAAAA,IAAI,GAAGZ,KAAP;AACA,MAAII,YAAY,CAACE,MAAb,GAAoB,CAApB,GAAsB,CAA1B,EAA4BK,IAAI,GAAGT,UAAU,CAACC,YAAD,EAAcC,YAAd,CAAjB;;AAC5B,MAAG,CAACO,IAAJ,EAAS;AACLC,IAAAA,IAAI;AACJL,IAAAA,KAAK;AACR;;AACD,sBACI;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEK;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AAAU,MAAA,YAAY,EAAET,YAAxB;AAAsC,MAAA,YAAY,EAAEC;AAApD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEA,YAAxB;AAAsC,MAAA,eAAe,EAAEM;AAAvD;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAG,OAAf;AAAuB,MAAA,UAAU,EAAG,OAApC;AAA4C,MAAA,OAAO,EAAIH;AAAvD;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADJ;AAQH,CA7BD;;GAAMR,I;;KAAAA,I;AA+BN,eAAeA,IAAf","sourcesContent":["import ShowDrawing from \"./ShowDrawing\";\r\nimport ShowWord from \"./ShowWord\";\r\nimport { useState } from 'react'\r\nimport Keyboard from \"./Keyboard\";\r\nimport Button from \"./Button\";\r\n\r\nconst Main = ({count,setC}) => {\r\n    function checkGuess(toGuessChars,guessedChars){\r\n        for(let char of toGuessChars){\r\n            if (char === guessedChars[guessedChars.length-1])return true;\r\n        }\r\n        return false;\r\n    }\r\n    function click(){\r\n        setC(count+1);\r\n        console.log(count);\r\n    }\r\n    let toGuessChars = ['s','a','r','v','i','k','u','o','n','o']\r\n    let [guessedChars,setGuessedChars]=useState([]);\r\n    let flag = true;\r\n    let temp = 0;\r\n    temp = count; \r\n    if (guessedChars.length-1>0)flag = checkGuess(toGuessChars,guessedChars);\r\n    if(!flag){\r\n        temp++;\r\n        click();\r\n    }\r\n    return (\r\n        <>\r\n            <ShowDrawing drawingIndex={temp}/>\r\n            <ShowWord toGuessChars={toGuessChars} guessedChars={guessedChars} />\r\n            <Keyboard guessedChars={guessedChars} setGuessedChars={setGuessedChars}/>\r\n            <Button name = \"Nappi\" class_Name = \"Nappi\" onClick = {click}/>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}