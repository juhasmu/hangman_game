{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\hangman\\\\src\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport ShowDrawing from \"./ShowDrawing\";\nimport ShowWord from \"./ShowWord\";\nimport { useState } from 'react';\nimport Keyboard from \"./Keyboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  let [count, setC] = useState(1);\n\n  function countIncrement(SetC) {\n    if (count >= 10) SetC(1);else SetC(count + 1);\n  }\n\n  function checkGuess(toGuessChars, guessedChars) {\n    for (let char of toGuessChars) {\n      if (char === guessedChars[guessedChars.length - 1]) return true;\n    }\n\n    return false;\n  }\n\n  let toGuessChars = ['s', 'a', 'r', 'v', 'i', 'k', 'u', 'o', 'n', 'o'];\n  let [guessedChars, setGuessedChars] = useState([]);\n  let flag = true;\n  flag = checkGuess(toGuessChars, guessedChars);\n  if (!flag) countIncrement(setC);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ShowDrawing, {\n      drawingIndex: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ShowWord, {\n      toGuessChars: toGuessChars,\n      guessedChars: guessedChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      guessedChars: guessedChars,\n      setGuessedChars: setGuessedChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"opshkt9g/N3VNntmUL6inBTvlC4=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/js/hangman/src/Main.js"],"names":["ShowDrawing","ShowWord","useState","Keyboard","Main","count","setC","countIncrement","SetC","checkGuess","toGuessChars","guessedChars","char","length","setGuessedChars","flag"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,MAAI,CAACC,KAAD,EAAOC,IAAP,IAAeJ,QAAQ,CAAC,CAAD,CAA3B;;AACA,WAASK,cAAT,CAAwBC,IAAxB,EAA6B;AACzB,QAAIH,KAAK,IAAI,EAAb,EAAgBG,IAAI,CAAC,CAAD,CAAJ,CAAhB,KACKA,IAAI,CAACH,KAAK,GAAC,CAAP,CAAJ;AACN;;AACH,WAASI,UAAT,CAAoBC,YAApB,EAAiCC,YAAjC,EAA8C;AAC1C,SAAI,IAAIC,IAAR,IAAgBF,YAAhB,EAA6B;AACzB,UAAIE,IAAI,KAAKD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAoB,CAArB,CAAzB,EAAiD,OAAO,IAAP;AACpD;;AACD,WAAO,KAAP;AACH;;AACD,MAAIH,YAAY,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,CAAnB;AACA,MAAI,CAACC,YAAD,EAAcG,eAAd,IAA+BZ,QAAQ,CAAC,EAAD,CAA3C;AACA,MAAIa,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,GAAGN,UAAU,CAACC,YAAD,EAAcC,YAAd,CAAjB;AACA,MAAG,CAACI,IAAJ,EAASR,cAAc,CAACD,IAAD,CAAd;AACT,sBACI;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAED;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEK,YAAxB;AAAsC,MAAA,YAAY,EAAEC;AAApD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEA,YAAxB;AAAsC,MAAA,eAAe,EAAEG;AAAvD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CAxBD;;GAAMV,I;;KAAAA,I;AA0BN,eAAeA,IAAf","sourcesContent":["import ShowDrawing from \"./ShowDrawing\";\r\nimport ShowWord from \"./ShowWord\";\r\nimport { useState } from 'react'\r\nimport Keyboard from \"./Keyboard\";\r\n\r\nconst Main = () => {\r\n    let [count,setC] = useState(1);\r\n    function countIncrement(SetC){\r\n        if (count >= 10)SetC(1);\r\n        else SetC(count+1);\r\n      }\r\n    function checkGuess(toGuessChars,guessedChars){\r\n        for(let char of toGuessChars){\r\n            if (char === guessedChars[guessedChars.length-1])return true;\r\n        }\r\n        return false;\r\n    }\r\n    let toGuessChars = ['s','a','r','v','i','k','u','o','n','o']\r\n    let [guessedChars,setGuessedChars]=useState([]);\r\n    let flag = true;\r\n    flag = checkGuess(toGuessChars,guessedChars);\r\n    if(!flag)countIncrement(setC);\r\n    return (\r\n        <>\r\n            <ShowDrawing drawingIndex={count} />\r\n            <ShowWord toGuessChars={toGuessChars} guessedChars={guessedChars} />\r\n            <Keyboard guessedChars={guessedChars} setGuessedChars={setGuessedChars}/>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}