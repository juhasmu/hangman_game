{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\hangman\\\\src\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport ShowDrawing from \"./ShowDrawing\";\nimport ShowWord from \"./ShowWord\";\nimport { useState } from 'react';\nimport Keyboard from \"./Keyboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  function checkGuess(toGuessChars, guessedChars) {\n    for (let char of toGuessChars) {\n      if (char === guessedChars[guessedChars.length - 1]) return true;\n    }\n\n    return false;\n  }\n\n  let [count, setC] = useState(1);\n  let toGuessChars = ['s', 'a', 'r', 'v', 'i', 'k', 'u', 'o', 'n', 'o'];\n  let [guessedChars, setGuessedChars] = useState([]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ShowDrawing, {\n      drawingIndex: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ShowWord, {\n      toGuessChars: toGuessChars,\n      guessedChars: guessedChars,\n      setC: setC,\n      count: count,\n      toGuessC: toGuessChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      guessedChars: guessedChars,\n      setGuessedChars: setGuessedChars\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"opshkt9g/N3VNntmUL6inBTvlC4=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/js/hangman/src/Main.js"],"names":["ShowDrawing","ShowWord","useState","Keyboard","Main","checkGuess","toGuessChars","guessedChars","char","length","count","setC","setGuessedChars"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,WAASC,UAAT,CAAoBC,YAApB,EAAiCC,YAAjC,EAA8C;AAC1C,SAAI,IAAIC,IAAR,IAAgBF,YAAhB,EAA6B;AACzB,UAAIE,IAAI,KAAKD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAoB,CAArB,CAAzB,EAAiD,OAAO,IAAP;AACpD;;AACD,WAAO,KAAP;AACH;;AACD,MAAI,CAACC,KAAD,EAAOC,IAAP,IAAeT,QAAQ,CAAC,CAAD,CAA3B;AACA,MAAII,YAAY,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,CAAnB;AACA,MAAI,CAACC,YAAD,EAAcK,eAAd,IAA+BV,QAAQ,CAAC,EAAD,CAA3C;AAEA,sBACI;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEQ;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEJ,YAAxB;AAAsC,MAAA,YAAY,EAAEC,YAApD;AAAkE,MAAA,IAAI,EAAEI,IAAxE;AAA8E,MAAA,KAAK,EAAED,KAArF;AAA4F,MAAA,QAAQ,EAAEJ;AAAtG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEC,YAAxB;AAAsC,MAAA,eAAe,EAAEK;AAAvD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CAlBD;;GAAMR,I;;KAAAA,I;AAoBN,eAAeA,IAAf","sourcesContent":["import ShowDrawing from \"./ShowDrawing\";\r\nimport ShowWord from \"./ShowWord\";\r\nimport { useState } from 'react'\r\nimport Keyboard from \"./Keyboard\";\r\n\r\nconst Main = () => {\r\n    function checkGuess(toGuessChars,guessedChars){\r\n        for(let char of toGuessChars){\r\n            if (char === guessedChars[guessedChars.length-1])return true;\r\n        }\r\n        return false;\r\n    }\r\n    let [count,setC] = useState(1);\r\n    let toGuessChars = ['s','a','r','v','i','k','u','o','n','o']\r\n    let [guessedChars,setGuessedChars]=useState([]);\r\n    \r\n    return (\r\n        <>\r\n            <ShowDrawing drawingIndex={count}/>\r\n            <ShowWord toGuessChars={toGuessChars} guessedChars={guessedChars} setC={setC} count={count} toGuessC={toGuessChars}/>\r\n            <Keyboard guessedChars={guessedChars} setGuessedChars={setGuessedChars} />  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}