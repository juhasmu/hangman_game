{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\hangman\\\\src\\\\ShowWord.js\";\nimport React from 'react';\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ShowWord = _ref => {\n  let {\n    toGuessChars,\n    guessedChars\n  } = _ref;\n\n  function isLetterInWord(letter, word) {\n    for (let letterInWord of word) {\n      if (letter === letterInWord) return true;\n    }\n\n    return false;\n  }\n\n  function reload() {\n    window.location.reload(false);\n  }\n\n  let word = '';\n  let flag = false;\n\n  for (let letter of toGuessChars) {\n    flag = false;\n\n    for (let i = 0; i < guessedChars.length; i++) {\n      if (letter === guessedChars[i]) flag = true;\n    }\n\n    if (flag) word = word + letter;else word = word + '*';\n  }\n\n  if (isLetterInWord('*', word)) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"L\\xF6ysit sanan onneksi olkoon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      name: \"reload\",\n      className: \"reload\",\n      id: \"reload\",\n      onClick: reload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_c = ShowWord;\nexport default ShowWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowWord\");","map":{"version":3,"sources":["C:/js/hangman/src/ShowWord.js"],"names":["React","Button","ShowWord","toGuessChars","guessedChars","isLetterInWord","letter","word","letterInWord","reload","window","location","flag","i","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,MAAMC,QAAQ,GAAG,QAAkC;AAAA,MAAjC;AAACC,IAAAA,YAAD;AAAeC,IAAAA;AAAf,GAAiC;;AAC/C,WAASC,cAAT,CAAwBC,MAAxB,EAA+BC,IAA/B,EAAoC;AAChC,SAAI,IAAIC,YAAR,IAAwBD,IAAxB,EAA6B;AACzB,UAAGD,MAAM,KAAGE,YAAZ,EAAyB,OAAO,IAAP;AAC5B;;AACD,WAAO,KAAP;AACH;;AACD,WAASC,MAAT,GAAkB;AACdC,IAAAA,MAAM,CAACC,QAAP,CAAgBF,MAAhB,CAAuB,KAAvB;AACH;;AACD,MAAIF,IAAI,GAAG,EAAX;AACA,MAAIK,IAAI,GAAG,KAAX;;AACA,OAAI,IAAIN,MAAR,IAAkBH,YAAlB,EAA+B;AAC3BS,IAAAA,IAAI,GAAG,KAAP;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACT,YAAY,CAACU,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,UAAGP,MAAM,KAAGF,YAAY,CAACS,CAAD,CAAxB,EAA4BD,IAAI,GAAC,IAAL;AAC/B;;AACD,QAAGA,IAAH,EAAQL,IAAI,GAAGA,IAAI,GAACD,MAAZ,CAAR,KACKC,IAAI,GAAGA,IAAI,GAAC,GAAZ;AACR;;AACD,MAAGF,cAAc,CAAC,GAAD,EAAKE,IAAL,CAAjB,EAA4B;AAC5B,wBACI;AAAA,6BACE;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA;AADF,qBADJ;AAIE;;AACF,sBACI;AAAA,4BACE;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAG,QAAf;AAAwB,MAAA,SAAS,EAAG,QAApC;AAA6C,MAAA,EAAE,EAAC,QAAhD;AAAyD,MAAA,OAAO,EAAIE;AAApE;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADJ;AAOH,CAjCD;;KAAMP,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import React from 'react'\r\nimport Button from \"./Button\";\r\n\r\nconst ShowWord = ({toGuessChars, guessedChars}) => {\r\n    function isLetterInWord(letter,word){\r\n        for(let letterInWord of word){\r\n            if(letter===letterInWord)return true;\r\n        }\r\n        return false;\r\n    }\r\n    function reload() {\r\n        window.location.reload(false);\r\n    }\r\n    let word = '';\r\n    let flag = false;\r\n    for(let letter of toGuessChars){\r\n        flag = false;\r\n        for(let i=0;i<guessedChars.length;i++){\r\n            if(letter===guessedChars[i])flag=true;\r\n        }\r\n        if(flag)word = word+letter;\r\n        else word = word+'*';\r\n    }\r\n    if(isLetterInWord('*',word)){\r\n    return (\r\n        <>\r\n          <h2>{word}</h2>  \r\n        </>\r\n    )}\r\n    return (\r\n        <>\r\n          <h2>{word}</h2>\r\n          <p>LÃ¶ysit sanan onneksi olkoon</p>\r\n          <Button name = \"reload\" className = \"reload\" id='reload' onClick = {reload} />  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ShowWord\r\n"]},"metadata":{},"sourceType":"module"}